window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "opynions", "modulename": "opynions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "opynions.analysis", "modulename": "opynions.analysis", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "opynions.analysis.combined", "modulename": "opynions.analysis.combined", "kind": "module", "doc": "<p>All-in-one analysis function derived from the other analysis functions</p>\n"}, {"fullname": "opynions.analysis.combined.combined_analysis", "modulename": "opynions.analysis.combined", "qualname": "combined_analysis", "kind": "function", "doc": "<p>Combines all analyses into one function, optimizes by reusing graph object,\nisolates lists and communities list. NOTE: for a single combination of epsilon and mu.\nIncluded analyses: Variance, average isolates, average # communities, average modularity,\nand average similarity.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n_runs (int):</strong>  The number of simulation runs to be averaged over.</li>\n<li><strong>n_nodes (int):</strong>  The number of nodes in the network.</li>\n<li><strong>time_steps (int):</strong>  The number of time steps to simulate.</li>\n<li><strong>epsilon (float):</strong>  Tolerance parameter (range: [0, 0.5]).</li>\n<li><strong>mu (float):</strong>  Convergence parameter (range: [0, 0.5]).</li>\n<li><strong>m_generato (int):</strong>  affects graph generation, see networkx.barabasi_albert_graph()</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: containing all analyses with keys:\n      - \"variance\": Variance of opinions across all runs.\n      - \"num_isolates\": Average number of isolated nodes across all runs.\n      - \"num_communities\": Average number of communities across all runs.\n      - \"modularity\": Average modularity score across all runs.\n      - \"similarity\": Average neighbor similarity across all runs.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_runs</span>, </span><span class=\"param\"><span class=\"n\">n_nodes</span>, </span><span class=\"param\"><span class=\"n\">time_steps</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span>, </span><span class=\"param\"><span class=\"n\">mu</span>, </span><span class=\"param\"><span class=\"n\">m_ba</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.analysis.combined.modules_communities_analysis", "modulename": "opynions.analysis.combined", "qualname": "modules_communities_analysis", "kind": "function", "doc": "<p>Included analyses: average # communities, average modularity,</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n_runs (int):</strong>  The number of simulation runs to be averaged over.</li>\n<li><strong>n_nodes (int):</strong>  The number of nodes in the network.</li>\n<li><strong>time_steps (int):</strong>  The number of time steps to simulate.</li>\n<li><strong>epsilon (float):</strong>  Tolerance parameter (range: [0, 0.5]).</li>\n<li><strong>mu (float):</strong>  Convergence parameter (range: [0, 0.5]).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: containing all analyses with keys:\n      - \"avg_num_communities\": Average neighbor similarity across all runs.\n      - \"avg_modularity\": Average modularity score across all runs.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_runs</span>, </span><span class=\"param\"><span class=\"n\">n_nodes</span>, </span><span class=\"param\"><span class=\"n\">time_steps</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span>, </span><span class=\"param\"><span class=\"n\">mu</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.analysis.distribution", "modulename": "opynions.analysis.distribution", "kind": "module", "doc": "<p>Functions for analysis of opinion distribution in the network.</p>\n"}, {"fullname": "opynions.analysis.distribution.opinions_variance", "modulename": "opynions.analysis.distribution", "qualname": "opinions_variance", "kind": "function", "doc": "<p>Function to calculate variance of all opinions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n_runs (int):</strong>  The number of simulation runs.</li>\n<li><strong>n_nodes (int):</strong>  The number of nodes in the network.</li>\n<li><strong>time_steps (int):</strong>  The number of time steps to simulate.</li>\n<li><strong>epsilon (float):</strong>  Tolerance parameter (range: [0, 0.5]).</li>\n<li><strong>mu (float):</strong>  Convergence parameter (range: [0, 0.5]).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: The variance of opinions across all nodes and all runs.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_runs</span>, </span><span class=\"param\"><span class=\"n\">n_nodes</span>, </span><span class=\"param\"><span class=\"n\">time_steps</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span>, </span><span class=\"param\"><span class=\"n\">mu</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.analysis.distribution.count_peaks_in_histogram", "modulename": "opynions.analysis.distribution", "qualname": "count_peaks_in_histogram", "kind": "function", "doc": "<p>Function to count the peaks in the average histogram of opinions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>average_histogram (list) :</strong>  The average histogram of opinions.</li>\n<li><strong>threshold (float) :</strong>   Minimum height for a peak to be considered.</li>\n<li><strong>distance (int) :</strong>   Minimum number of bins between peaks.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>num_peaks (int) : The number of peaks in the histogram.\n  peak_indices (list) : Indices of the peaks in the histogram.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">average_histogram</span>, </span><span class=\"param\"><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mi\">100</span>, </span><span class=\"param\"><span class=\"n\">distance</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.analysis.isolation", "modulename": "opynions.analysis.isolation", "kind": "module", "doc": "<p>Functions for analysis of disconnected nodes in the network.</p>\n"}, {"fullname": "opynions.analysis.isolation.count_disconnected_nodes", "modulename": "opynions.analysis.isolation", "qualname": "count_disconnected_nodes", "kind": "function", "doc": "<p>Counts the number of disconnected nodes (isolates) in a given graph.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>graph (networkx.Graph):</strong>  The graph to analyze.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: Number of disconnected nodes (isolates).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.analysis.isolation.analyze_disconnected_nodes", "modulename": "opynions.analysis.isolation", "qualname": "analyze_disconnected_nodes", "kind": "function", "doc": "<p>Analyzes and counts the number of disconnected nodes for a range of epsilon values.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n_runs (int):</strong>  Number of runs for each epsilon value.</li>\n<li><strong>n_nodes (int):</strong>  Number of nodes in the graph.</li>\n<li><strong>time_steps (int):</strong>  Number of time steps in the simulation.</li>\n<li><strong>mu (float):</strong>  Parameter for adjusting opinions.</li>\n<li><strong>epsilon_values (list or numpy.ndarray):</strong>  Range of epsilon values to test.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: Average number of disconnected nodes for each epsilon value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_runs</span>, </span><span class=\"param\"><span class=\"n\">n_nodes</span>, </span><span class=\"param\"><span class=\"n\">time_steps</span>, </span><span class=\"param\"><span class=\"n\">mu</span>, </span><span class=\"param\"><span class=\"n\">epsilon_values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.analysis.modularity", "modulename": "opynions.analysis.modularity", "kind": "module", "doc": "<p>Functions for analyzing the number of communities and modularity of graphs.</p>\n"}, {"fullname": "opynions.analysis.modularity.count_communities", "modulename": "opynions.analysis.modularity", "qualname": "count_communities", "kind": "function", "doc": "<p>Counts the number of communities in a graph based on community detection.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>graph (networkx.Graph):</strong>  The graph for which to count communities.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The number of communities in the graph.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.analysis.modularity.analyze_communities", "modulename": "opynions.analysis.modularity", "qualname": "analyze_communities", "kind": "function", "doc": "<p>Analyzes and calculates the average number of communities \nin graphs for a range of epsilon values.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n_runs (int):</strong>  Number of runs for each epsilon value.</li>\n<li><strong>n_nodes (int):</strong>  Number of nodes in the graph.</li>\n<li><strong>time_steps (int):</strong>  Number of time steps in the simulation.</li>\n<li><strong>mu (float):</strong>  Parameter for adjusting opinions.</li>\n<li><strong>epsilon_values (list):</strong>  Range of epsilon values to test.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: Average number of communities for each epsilon value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_runs</span>, </span><span class=\"param\"><span class=\"n\">n_nodes</span>, </span><span class=\"param\"><span class=\"n\">time_steps</span>, </span><span class=\"param\"><span class=\"n\">mu</span>, </span><span class=\"param\"><span class=\"n\">epsilon_values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.analysis.modularity.calculate_modularity", "modulename": "opynions.analysis.modularity", "qualname": "calculate_modularity", "kind": "function", "doc": "<p>Calculates the modularity of a graph based on community detection.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>graph (networkx.Graph):</strong>  The graph for which to calculate modularity.</li>\n<li><strong>exclude_isolates (boolean):</strong>  Whether to exclude isolated nodes.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: The modularity of the graph.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.analysis.modularity.analyze_modularity", "modulename": "opynions.analysis.modularity", "qualname": "analyze_modularity", "kind": "function", "doc": "<p>Analyzes and calculates the average modularity of graphs for a range of epsilon values.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n_runs (int):</strong>  Number of runs for each epsilon value.</li>\n<li><strong>n_nodes (int):</strong>  Number of nodes in the graph.</li>\n<li><strong>time_steps (int):</strong>  Number of time steps in the simulation.</li>\n<li><strong>mu (float):</strong>  Parameter for adjusting opinions.</li>\n<li><strong>epsilon_values (list or numpy.ndarray):</strong>  Range of epsilon values to test.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: Average modularity values for each epsilon value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_runs</span>, </span><span class=\"param\"><span class=\"n\">n_nodes</span>, </span><span class=\"param\"><span class=\"n\">time_steps</span>, </span><span class=\"param\"><span class=\"n\">mu</span>, </span><span class=\"param\"><span class=\"n\">epsilon_values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.analysis.multiprocessing", "modulename": "opynions.analysis.multiprocessing", "kind": "module", "doc": "<p>Multiprocessing functions for generating dicts with data,\nuses the combined analysis function in opynions.analysis.combined.</p>\n"}, {"fullname": "opynions.analysis.multiprocessing.worker_all_both_params", "modulename": "opynions.analysis.multiprocessing", "qualname": "worker_all_both_params", "kind": "function", "doc": "<p>Process manager, receives all parameters needed \nand returns a dict full of the combined analysis results for that parameter space point.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">epsilon</span>, </span><span class=\"param\"><span class=\"n\">mu</span>, </span><span class=\"param\"><span class=\"n\">n_runs</span>, </span><span class=\"param\"><span class=\"n\">n_nodes</span>, </span><span class=\"param\"><span class=\"n\">time_steps</span>, </span><span class=\"param\"><span class=\"n\">m_ba</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.analysis.multiprocessing.multiprocess_all", "modulename": "opynions.analysis.multiprocessing", "qualname": "multiprocess_all", "kind": "function", "doc": "<p>Performs all the analysis types on the given parameters using multiprocessing.</p>\n\n<p>Parameters:\nepsilon_values (list): List of epsilon values to be used in the analysis.\nmu_values (list): List of mu values to be used in the analysis.\nn_runs (int): Number of runs for each parameter combination.\nn_nodes (int): Number of nodes in the network.\ntime_steps (int): Number of time steps for the simulation.\nm_ba (int): affects graph generation, see networkx.barabasi_albert_graph()</p>\n\n<p>Returns:\nlist: A list of dictionaries containing the results of the analysis for each parameter combination.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">epsilon_values</span>, </span><span class=\"param\"><span class=\"n\">mu_values</span>, </span><span class=\"param\"><span class=\"n\">n_runs</span>, </span><span class=\"param\"><span class=\"n\">n_nodes</span>, </span><span class=\"param\"><span class=\"n\">time_steps</span>, </span><span class=\"param\"><span class=\"n\">m_ba</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.analysis.similarity", "modulename": "opynions.analysis.similarity", "kind": "module", "doc": "<p>Functions for analyzing the similarity of opinions between neighbors in a graph.</p>\n"}, {"fullname": "opynions.analysis.similarity.compute_neighbor_similarity", "modulename": "opynions.analysis.similarity", "qualname": "compute_neighbor_similarity", "kind": "function", "doc": "<p>Computes the average similarity of opinions between neighbors in the graph.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>graph (networkx.Graph):</strong>  The graph with 'opinion' as a node attribute.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: Average similarity of opinions between neighbors.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.analysis.similarity.analyze_neighbor_similarity", "modulename": "opynions.analysis.similarity", "qualname": "analyze_neighbor_similarity", "kind": "function", "doc": "<p>Analyzes and calculates the average neighbor similarity for a range of epsilon values.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n_runs (int):</strong>  Number of runs for each epsilon value.</li>\n<li><strong>n_nodes (int):</strong>  Number of nodes in the graph.</li>\n<li><strong>time_steps (int):</strong>  Number of time steps in the simulation.</li>\n<li><strong>mu (float):</strong>  Parameter for adjusting opinions.</li>\n<li><strong>epsilon_values (list or numpy.ndarray):</strong>  Range of epsilon values to test.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: Average neighbor similarity values for each epsilon value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_runs</span>, </span><span class=\"param\"><span class=\"n\">n_nodes</span>, </span><span class=\"param\"><span class=\"n\">time_steps</span>, </span><span class=\"param\"><span class=\"n\">mu</span>, </span><span class=\"param\"><span class=\"n\">epsilon_values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.analysis.utils", "modulename": "opynions.analysis.utils", "kind": "module", "doc": "<p>Utility functions for data handling and plotting</p>\n"}, {"fullname": "opynions.analysis.utils.list_of_dicts_to_csv", "modulename": "opynions.analysis.utils", "qualname": "list_of_dicts_to_csv", "kind": "function", "doc": "<p>Function to convert a list of dictionaries to a list of lists and save it to a CSV file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dict_list (list) :</strong>  List of dictionaries with the same keys.</li>\n<li><strong>file_path (str) :</strong>  Path to the CSV file to save the data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple : A tuple containing a list of lists where each sublist contains the values corresponding to each key,\n          and a list of keys in the order they appear in the output list.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dict_list</span>, </span><span class=\"param\"><span class=\"n\">file_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.analysis.utils.create_heatmap_from_csv", "modulename": "opynions.analysis.utils", "qualname": "create_heatmap_from_csv", "kind": "function", "doc": "<p>Function to create a heatmap from a CSV file with user-defined columns for values and coordinates.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file_path (str) :</strong>  Path to the CSV file containing the data.</li>\n<li><strong>value_column (str) :</strong>  Name of the column to be used for heatmap values, is also the title.</li>\n<li><strong>x_coord_column (str) :</strong>  Name of the column to be used for x-axis coordinates.</li>\n<li><strong>y_coord_column (str) :</strong>  Name of the column to be used for y-axis coordinates.</li>\n<li><strong>save (bool, optional) :</strong>  whether to save the image or not. Default False</li>\n<li><strong>image_path (str, optional) :</strong>  OPTIONAL desired path of the generated image. Default 'Heatmap.png'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_path</span>,</span><span class=\"param\">\t<span class=\"n\">value_column</span>,</span><span class=\"param\">\t<span class=\"n\">x_coord_column</span>,</span><span class=\"param\">\t<span class=\"n\">y_coord_column</span>,</span><span class=\"param\">\t<span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">image_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;Heatmap.png&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.analysis.utils.plot_graph", "modulename": "opynions.analysis.utils", "qualname": "plot_graph", "kind": "function", "doc": "<p>Plots the graph with nodes colored by opinion and saves it to a file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>g (networkx.Graph):</strong>  Graph to plot.</li>\n<li><strong>include_colorbar (bool, optional):</strong>  Whether to include the colorbar in the plot. Default True.</li>\n<li><strong>exclude_isolates (bool, optional):</strong>  Whether to exclude isolated nodes from the plot. Default False.</li>\n<li><strong>save_file (bool, optional):</strong>  Whether to save the image file. Default False.</li>\n<li><strong>file_path (str, optional):</strong>  Path to save the plot image. Default 'graph_plot.png'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">g</span>,</span><span class=\"param\">\t<span class=\"n\">include_colorbar</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_isolates</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">save_file</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;graph_plot.png&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.analysis.utils.plot_subplots_from_csv", "modulename": "opynions.analysis.utils", "qualname": "plot_subplots_from_csv", "kind": "function", "doc": "<p>Plots subplots from a CSV file with metrics against a specified x-axis column.</p>\n\n<p>Args:\ncsv_file (str): Path to the CSV file containing the data.\nx_axis_column (str): The column to be used as the x-axis. Must be either 'epsilon' or 'mu'.\nsave_file (bool, optional): If True, saves the plot to a file. Default is False.\nfile_path (str, optional): The file path to save the plot if save_file is True. Default is 'sliceplots.png'.</p>\n\n<p>Raises:\nValueError: If x_axis_column is not 'epsilon' or 'mu'.</p>\n\n<p>Returns:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">csv_file</span>, </span><span class=\"param\"><span class=\"n\">x_axis_column</span>, </span><span class=\"param\"><span class=\"n\">save_file</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;sliceplots.png&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.analysis.utils.plot_opinion_distribution", "modulename": "opynions.analysis.utils", "qualname": "plot_opinion_distribution", "kind": "function", "doc": "<p>Plots the opinion distribution histogram from a graph and (optionally) saves it to a file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>g (networkx.Graph):</strong>  Graph with 'opinion' attribute for nodes.</li>\n<li><strong>save_file (bool, optional):</strong>  Whether to save the histogram to a file. Default False.</li>\n<li><strong>file_path (str, optional):</strong>  Path to save the histogram image. Default 'opinion_distribution.png'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">g</span>, </span><span class=\"param\"><span class=\"n\">save_file</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;opinion_distribution.png&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.core", "modulename": "opynions.core", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "opynions.core.simulation", "modulename": "opynions.core.simulation", "kind": "module", "doc": "<p>Core model functions.\nRefer to the paper for more details on the model: <a href=\"https://www.nature.com/articles/srep40391\">https://www.nature.com/articles/srep40391</a></p>\n"}, {"fullname": "opynions.core.simulation.rho", "modulename": "opynions.core.simulation", "qualname": "rho", "kind": "function", "doc": "<p>Function used to guarantee periodic boundary conditions as per eq 1 in paper</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  opinion distance between two nodes, bounds [-1, 1]</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(int) -1, 0, or 1 based on x</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.core.simulation.UCM_adjust_opinion", "modulename": "opynions.core.simulation", "qualname": "UCM_adjust_opinion", "kind": "function", "doc": "<p>Adjusts opinions i and j based on the given parameters as per eq 2 &amp; 3 in paper</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>i (float):</strong>  opinion i</li>\n<li><strong>j (float):</strong>  opinion j</li>\n<li><strong>mu (float):</strong>  parameter for adjusting opinions, bounds [0,1]</li>\n<li><strong>epsilon (float):</strong>  threshold for opinion distance, bounds [0,1]</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">i</span>, </span><span class=\"param\"><span class=\"n\">j</span>, </span><span class=\"param\"><span class=\"n\">mu</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.core.simulation.initialize_graph", "modulename": "opynions.core.simulation", "qualname": "initialize_graph", "kind": "function", "doc": "<p>Creates a Scale-Free graph with N nodes and uniformly random opinions between 0 and 1</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>N (int):</strong>  number of nodes</li>\n<li><strong>m_ba (int):</strong>  affects graph generation, see networkx.barabasi_albert_graph()</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>g: networkx graph</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">N</span>, </span><span class=\"param\"><span class=\"n\">m_ba</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.core.simulation.run_sim", "modulename": "opynions.core.simulation", "qualname": "run_sim", "kind": "function", "doc": "<p>Runs simulation until T time steps and returns the final graph.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>N (int):</strong>  number of nodes</li>\n<li><strong>T (int):</strong>  number of time steps</li>\n<li><strong>mu (float):</strong>  parameter for adjusting opinions, bounds [0,1]</li>\n<li><strong>epsilon (float):</strong>  threshold for opinion distance, bounds [0,1]</li>\n<li><strong>m_ba (int):</strong>  affects graph generation, see networkx.barabasi_albert_graph()</li>\n</ul>\n\n<p>Returns: \n    g (networkx.Graph): final graph\n    g_init (networkx.Graph): initial graph</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">N</span>, </span><span class=\"param\"><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span>, </span><span class=\"param\"><span class=\"n\">mu</span>, </span><span class=\"param\"><span class=\"n\">m_ba</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.core.utils", "modulename": "opynions.core.utils", "kind": "module", "doc": "<p>Functions for accessing simulation results</p>\n"}, {"fullname": "opynions.core.utils.get_graphs", "modulename": "opynions.core.utils", "qualname": "get_graphs", "kind": "function", "doc": "<p>Simulates N_Runs networks and returns the final and initial graphs</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n_runs:</strong>  (int) number of graphs generated</li>\n<li><strong>n_nodes:</strong>  (int) number of nodes within the network</li>\n<li><strong>time_steps:</strong>  (int) number of time steps to progress simulation for</li>\n<li><strong>epsilon:</strong>  (float bounds: [0,1]) threshold for opinion distance </li>\n<li><strong>mu:</strong>  (float bounds: [0,1]) parameter for adjusting opinions</li>\n<li><strong>m_ba (int):</strong>  affects graph generation, see networkx.barabasi_albert_graph</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple containing:\n      all_final_graphs: list of final graphs, length n_runs\n      all_initial_graphs: list of initial graphs, length n_runs</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_runs</span>, </span><span class=\"param\"><span class=\"n\">n_nodes</span>, </span><span class=\"param\"><span class=\"n\">time_steps</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span>, </span><span class=\"param\"><span class=\"n\">mu</span>, </span><span class=\"param\"><span class=\"n\">m_ba</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.core.utils.get_opinion_hist", "modulename": "opynions.core.utils", "qualname": "get_opinion_hist", "kind": "function", "doc": "<p>Simulates N_Runs networks and returns an array of arrays of opinions\nand the average distribution histogram</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n_runs:</strong>  (int) number of runs</li>\n<li><strong>n_nodes:</strong>  (int) number of nodes</li>\n<li><strong>time_steps:</strong>  (int) number of time steps</li>\n<li><strong>epsilon:</strong>  (float bounds: [0,1]) threshold for opinion distance </li>\n<li><strong>mu:</strong>  (float bounds: [0,1]) parameter for adjusting opinions</li>\n<li><strong>m_ba (int):</strong>  affects graph generation, see networkx.barabasi_albert_graph()</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>triple containing:\n      all_opinions: array of arrays of opinions, shape (n_runs, n_nodes)\n      average_histogram: average histogram of opinions, length 100\n      avg_isolated: average number of isolated nodes</p>\n</blockquote>\n\n<h6 id=\"example-usage\">Example usage:</h6>\n\n<blockquote>\n  <h1 id=\"if-you-want-to-plot-the-average-histogram-of-opinions\">If you want to plot the average histogram of opinions</h1>\n  \n  <p>_, average_histogram = get_opinion_hist(1, 2000, 100, 0.1, 0.05)</p>\n  \n  <p>import matplotlib.pyplot as plt</p>\n  \n  <p>plt.figure(figsize=(10, 6))\n  plt.bar(np.linspace(0, 1, len(average_histogram)),\n      average_histogram, width=0.01, align='center')\n  plt.xlabel('Opinion')\n  plt.ylabel('Frequency')\n  plt.show()</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_runs</span>,</span><span class=\"param\">\t<span class=\"n\">n_nodes</span>,</span><span class=\"param\">\t<span class=\"n\">time_steps</span>,</span><span class=\"param\">\t<span class=\"n\">epsilon</span>,</span><span class=\"param\">\t<span class=\"n\">mu</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_loners</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">m_ba</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.demo", "modulename": "opynions.demo", "kind": "module", "doc": "<p>Functions for demonstrating the package.</p>\n"}, {"fullname": "opynions.demo.slice_plots", "modulename": "opynions.demo", "qualname": "slice_plots", "kind": "function", "doc": "<p>Generates and saves slice plots by varying either epsilon or mu parameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>epsilon (float or list of floats):</strong>  Epsilon value(s) to be used in the simulation.</li>\n<li><strong>mu (float or list of floats):</strong>  Mu value(s) to be used in the simulation.</li>\n<li><strong>n_runs (int):</strong>  Number of runs for the simulation.</li>\n<li><strong>n_nodes (int):</strong>  Number of nodes in the network.</li>\n<li><strong>time_steps (int):</strong>  Number of time steps for the simulation.</li>\n<li><strong>m_ba (int):</strong>  Parameter for the Barab\u00e1si\u2013Albert model. See networkx.barabasi_albert_graph()</li>\n<li><strong>keep_csv (bool, optional):</strong>  If True, the generated CSV file will be kept. Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>AssertionError:</strong>  If neither epsilon nor mu is a single float.</li>\n<li><strong>AssertionError:</strong>  If both epsilon and mu are single floats.</li>\n<li><strong>AssertionError:</strong>  If neither epsilon nor mu is a list or numpy array.</li>\n<li><strong>AssertionError:</strong>  If any value in epsilon is not between 0 and 1.</li>\n<li><strong>AssertionError:</strong>  If any value in mu is not between 0 and 1.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">epsilon</span>, </span><span class=\"param\"><span class=\"n\">mu</span>, </span><span class=\"param\"><span class=\"n\">n_runs</span>, </span><span class=\"param\"><span class=\"n\">n_nodes</span>, </span><span class=\"param\"><span class=\"n\">time_steps</span>, </span><span class=\"param\"><span class=\"n\">m_ba</span>, </span><span class=\"param\"><span class=\"n\">keep_csv</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.demo.create_heatmaps", "modulename": "opynions.demo", "qualname": "create_heatmaps", "kind": "function", "doc": "<p>Generates heatmaps based on the provided parameters and saves the data for them to a CSV file.\nIf the CSV file already exists, it wont regenerate the data (wasting time), and just plot the heatmaps.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>epsilon (list):</strong>  A list of epsilon values, each between 0 and 1.</li>\n<li><strong>mu (list):</strong>  A list of mu values, each between 0 and 1.</li>\n<li><strong>n_runs (int):</strong>  The number of runs to perform.</li>\n<li><strong>n_nodes (int):</strong>  The number of nodes in the network.</li>\n<li><strong>time_steps (int):</strong>  The number of time steps for the simulation.</li>\n<li><strong>m_ba (int):</strong>  The parameter for the Barab\u00e1si\u2013Albert model.</li>\n<li><strong>file_path (str, optional):</strong>  The path to the CSV file where the heatmap data will be saved. Defaults to 'heatmap.csv'.</li>\n<li><strong>keep_csv (bool, optional):</strong>  Whether to keep the CSV file after creating the heatmap. Defaults to True.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>AssertionError:</strong>  If epsilon or mu are not lists, or if their values are not between 0 and 1.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">epsilon</span>,</span><span class=\"param\">\t<span class=\"n\">mu</span>,</span><span class=\"param\">\t<span class=\"n\">n_runs</span>,</span><span class=\"param\">\t<span class=\"n\">n_nodes</span>,</span><span class=\"param\">\t<span class=\"n\">time_steps</span>,</span><span class=\"param\">\t<span class=\"n\">m_ba</span>,</span><span class=\"param\">\t<span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;heatmap.csv&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">keep_csv</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "opynions.settings", "modulename": "opynions.settings", "kind": "module", "doc": "<p>The constants used when creating results shown in the presentation</p>\n"}, {"fullname": "opynions.settings.EPSILON_VALUES", "modulename": "opynions.settings", "qualname": "EPSILON_VALUES", "kind": "variable", "doc": "<p></p>\n", "default_value": "array([0.  , 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1 ,\n       0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2 , 0.21,\n       0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3 , 0.31, 0.32,\n       0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4 , 0.41, 0.42, 0.43,\n       0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5 ])"}, {"fullname": "opynions.settings.MU_VALUES", "modulename": "opynions.settings", "qualname": "MU_VALUES", "kind": "variable", "doc": "<p></p>\n", "default_value": "array([0.  , 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1 ,\n       0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2 , 0.21,\n       0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3 , 0.31, 0.32,\n       0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4 , 0.41, 0.42, 0.43,\n       0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5 ])"}, {"fullname": "opynions.settings.N_RUNS", "modulename": "opynions.settings", "qualname": "N_RUNS", "kind": "variable", "doc": "<p></p>\n", "default_value": "5"}, {"fullname": "opynions.settings.TIME_STEPS", "modulename": "opynions.settings", "qualname": "TIME_STEPS", "kind": "variable", "doc": "<p></p>\n", "default_value": "100"}, {"fullname": "opynions.settings.N_NODES", "modulename": "opynions.settings", "qualname": "N_NODES", "kind": "variable", "doc": "<p></p>\n", "default_value": "2000"}, {"fullname": "opynions.settings.M_BA", "modulename": "opynions.settings", "qualname": "M_BA", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "opynions.settings.MODULARITY_RES", "modulename": "opynions.settings", "qualname": "MODULARITY_RES", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.1"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();